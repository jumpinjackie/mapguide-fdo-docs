<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MapGuide API Reference: MgFeatureReader Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<link href="../../mg_open_source.css" rel="stylesheet" type="text/css" />
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>

</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MapGuide API Reference
   
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.8.0 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
</script>
<script type="text/javascript" src="../../dynsections.js"></script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="../../index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="../../pages.htm"><span>Related&#160;Pages</span></a></li>
      <li><a href="../../modules.htm"><span>Modules</span></a></li>
      <li class="current"><a href="../../annotated.htm"><span>Classes</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="../../search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="../../search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="../../annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="../../classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="../../inherits.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="../../functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('d6/ddc/class_mg_feature_reader.htm','../../');
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Friends</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">MgFeatureReader Class Reference<div class="ingroups"><a class="el" href="../../d1/d38/group___mg_feature_reader.htm">MgFeatureReader</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>Provides a forward-only, read-only iterator for reading features selected from the FDO Provider by the <a class="el" href="../../d5/d10/class_mg_feature_service_acd90e83ea6f7d1c0c68b8547c7ec6286.htm#acd90e83ea6f7d1c0c68b8547c7ec6286" title="Selects features from a feature source according to the criteria set in the MgFeatureQueryOptions arg...">MgFeatureService::SelectFeatures()</a> method call.  
 <a href="../../d6/ddc/class_mg_feature_reader.htm#details">More...</a></p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="../../closed.png" alt="+"/> Inheritance diagram for MgFeatureReader:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><img src="../../d8/d5f/class_mg_feature_reader__inherit__graph.png" border="0" usemap="#_mg_feature_reader_inherit__map" alt="Inheritance graph"/></div>
<map name="_mg_feature_reader_inherit__map" id="_mg_feature_reader_inherit__map">
<area shape="rect" id="node2" href="../../df/dcc/class_mg_reader.htm" title="Provides a forward&#45;only, read&#45;only iterator for reading data. You must call ReadNext before you can a..." alt="" coords="27,80,109,107"/><area shape="rect" id="node3" href="../../d8/dfa/class_mg_serializable.htm" title="MgSerializable" alt="" coords="15,5,121,32"/></map>
<center><span class="legend">[<a target="top" href="../../graph_legend.htm">legend</a>]</span></center></div>

<p><a href="../../d1/d4c/class_mg_feature_reader-members.htm">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a9c24a281267d0c0e09114fe4ad5dbdfa"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="../../db/dcf/class_mg_class_definition.htm">MgClassDefinition</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/ddc/class_mg_feature_reader_a9c24a281267d0c0e09114fe4ad5dbdfa.htm#a9c24a281267d0c0e09114fe4ad5dbdfa">GetClassDefinition</a> ()=0</td></tr>
<tr class="memdesc:a9c24a281267d0c0e09114fe4ad5dbdfa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the class definition of the object currently being read. If the user has requested only a subset of the class properties (as specified in the filter text), the class definition reflects what the user has requested, rather than the full class definition.  <a href="#a9c24a281267d0c0e09114fe4ad5dbdfa"></a><br/></td></tr>
<tr class="memitem:ad8380db6b3c3a8031186742b51a09569"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="../../d6/ddc/class_mg_feature_reader.htm">MgFeatureReader</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/ddc/class_mg_feature_reader_ad8380db6b3c3a8031186742b51a09569.htm#ad8380db6b3c3a8031186742b51a09569">GetFeatureObject</a> (CREFSTRING propertyName)=0</td></tr>
<tr class="memdesc:ad8380db6b3c3a8031186742b51a09569"><td class="mdescLeft">&#160;</td><td class="mdescRight">Use this method to obtain the values of the properties belonging to an object contained in the feature class instance. Such an object is a property of the feature class instance with a type of <a class="el" href="../../d1/d70/class_mg_property_type_a485f798b7264ac678831c47b06c28026.htm#a485f798b7264ac678831c47b06c28026" title="Type name for a feature property (MgFeatureProperty).">MgPropertyType::Feature</a>.  <a href="#ad8380db6b3c3a8031186742b51a09569"></a><br/></td></tr>
<tr class="memitem:a1af41d95b91800badc11c5c097b5de42"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="../../d6/ddc/class_mg_feature_reader.htm">MgFeatureReader</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/ddc/class_mg_feature_reader_a1af41d95b91800badc11c5c097b5de42.htm#a1af41d95b91800badc11c5c097b5de42">GetFeatureObject</a> (INT32 index)=0</td></tr>
<tr class="memdesc:a1af41d95b91800badc11c5c097b5de42"><td class="mdescLeft">&#160;</td><td class="mdescRight">Use this method to obtain the values of the properties belonging to an object contained in the feature class instance. Such an object is a property of the feature class instance with a type of <a class="el" href="../../d1/d70/class_mg_property_type_a485f798b7264ac678831c47b06c28026.htm#a485f798b7264ac678831c47b06c28026" title="Type name for a feature property (MgFeatureProperty).">MgPropertyType::Feature</a>.  <a href="#a1af41d95b91800badc11c5c097b5de42"></a><br/></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>Provides a forward-only, read-only iterator for reading features selected from the FDO Provider by the <a class="el" href="../../d5/d10/class_mg_feature_service_acd90e83ea6f7d1c0c68b8547c7ec6286.htm#acd90e83ea6f7d1c0c68b8547c7ec6286" title="Selects features from a feature source according to the criteria set in the MgFeatureQueryOptions arg...">MgFeatureService::SelectFeatures()</a> method call. </p>
<dl class="section remark"><dt>Remarks:</dt><dd>You must call <a class="el" href="../../df/dcc/class_mg_reader_aa0487e5da166d24147d2e543d85a4226.htm#aa0487e5da166d24147d2e543d85a4226" title="Advances the reader to the next item and determines whether there is another object to read...">ReadNext()</a> before you can access the data. Call GetProperties() to get the property values for the feature. For each property, determine the property type and then call the appropriate Get&lt;type&gt;() method to get the value of the property. With one exception the Get&lt;type&gt; methods belong to the <a class="el" href="../../df/dcc/class_mg_reader.htm" title="Provides a forward-only, read-only iterator for reading data. You must call ReadNext before you can a...">MgReader</a> base class. The exception is <a class="el" href="../../d6/ddc/class_mg_feature_reader_ad8380db6b3c3a8031186742b51a09569.htm#ad8380db6b3c3a8031186742b51a09569" title="Use this method to obtain the values of the properties belonging to an object contained in the featur...">MgFeatureReader::GetFeatureObject()</a>. Obtain the next feature by calling the <a class="el" href="../../df/dcc/class_mg_reader_aa0487e5da166d24147d2e543d85a4226.htm#aa0487e5da166d24147d2e543d85a4226" title="Advances the reader to the next item and determines whether there is another object to read...">ReadNext()</a> method.</dd></dl>
<div class="PhpExample">
<b>Example (PHP)</b>
<br>
 <div class="fragment"><pre class="fragment"> <span class="comment">// each ReadNext() gets a &quot;row&quot; object, that is,</span>
 <span class="comment">// an instantiation of a class with properties</span>
 <span class="comment">// returns number of features in reader</span>
 <span class="keyword">function</span> printFeatureReader($featureReader)
 {
    global $logFileHandle;
    $i = 0;
    <span class="keywordflow">while</span> ($featureReader-&gt;ReadNext())
    {
       fwrite($logFileHandle, <span class="stringliteral">&quot;Printing a feature.n&quot;</span>);
       $i++;
       $propCount = $featureReader-&gt;GetPropertyCount();
       <span class="keywordflow">for</span>($j=0; $j&lt;$propCount; $j++)
       {
           $propertyName = $featureReader-&gt;GetPropertyName($j);
           $boolVal = $featureReader-&gt;IsNull($propertyName);
           <span class="keywordflow">if</span> ($boolVal)
              <span class="keywordflow">continue</span>;
           $propertyType = $featureReader-&gt;GetPropertyType($propertyName);
           printPropertyValueFromFeatReader($featureReader, $propertyType, $propertyName);
       }
    }
    <span class="keywordflow">return</span> $i;
 }

 <span class="keyword">function</span> printPropertyValueFromFeatReader($featureReader, $propertyType, $propertyName)
 {
    global $logFileHandle;
    global $agfReaderWriter;
    global $wktReaderWriter;
    <span class="keywordflow">switch</span> ($propertyType)
    {
       <span class="keywordflow">case</span> <a class="code" href="../../d1/d70/class_mg_property_type_a90718507e1318a6c281de18a261fce6e.htm#a90718507e1318a6c281de18a261fce6e" title="Type name for a null property.">MgPropertyType::Null</a> :
              fwrite($logFileHandle, <span class="stringliteral">&quot;$propertyName is a null propertyn&quot;</span>);
              <span class="keywordflow">break</span>;
       <span class="keywordflow">case</span> <a class="code" href="../../d1/d70/class_mg_property_type_af094946b855cb1edb3e51f6f2547b718.htm#af094946b855cb1edb3e51f6f2547b718" title="Type name for a boolean property (MgBooleanProperty).">MgPropertyType::Boolean</a> :
              $val = $featureReader-&gt;GetBoolean($propertyName);
              $valStr = printBoolean($val);
              fwrite($logFileHandle, <span class="stringliteral">&quot;$propertyName is boolean &quot;</span>$valStr<span class="stringliteral">&quot;n&quot;</span>);
              <span class="keywordflow">break</span>;
       <span class="keywordflow">case</span> <a class="code" href="../../d1/d70/class_mg_property_type_a119062dfef7651615e25a54f634e9e15.htm#a119062dfef7651615e25a54f634e9e15" title="Type name for a byte (unsigned 8 bit value) property (MgByteProperty).">MgPropertyType::Byte</a> :
              $val = $featureReader-&gt;GetByte($propertyName);
              fwrite($logFileHandle, <span class="stringliteral">&quot;$propertyName has a byte value of &quot;</span>$val<span class="stringliteral">&quot;n&quot;</span>);
              <span class="keywordflow">break</span>;
       <span class="keywordflow">case</span> <a class="code" href="../../d1/d70/class_mg_property_type_ad47ce1a052f91816e9b71e0144272d62.htm#ad47ce1a052f91816e9b71e0144272d62" title="Type name for an MgDateTime property (MgDateTimeProperty).">MgPropertyType::DateTime</a> :
              $val = $featureReader-&gt;GetDateTime($propertyName);
              $valStr = printDateTime($val);
              fwrite($logFileHandle, <span class="stringliteral">&quot;DateTime is &quot;</span>$valStr<span class="stringliteral">&quot;n&quot;</span>);
              <span class="keywordflow">break</span>;
       <span class="keywordflow">case</span> <a class="code" href="../../d1/d70/class_mg_property_type_acd03cf26a6a730a009c280fdfa9965d6.htm#acd03cf26a6a730a009c280fdfa9965d6" title="Type name for a single precision floating point value property (MgSingleProperty).">MgPropertyType::Single</a> :
              $val = $featureReader-&gt;GetSingle($propertyName);
              fwrite($logFileHandle, <span class="stringliteral">&quot;$propertyName is single &quot;</span>$val<span class="stringliteral">&quot;n&quot;</span>);
              <span class="keywordflow">break</span>;
       <span class="keywordflow">case</span> <a class="code" href="../../d1/d70/class_mg_property_type_a51e27358659c2b7e92c1690c25369d92.htm#a51e27358659c2b7e92c1690c25369d92" title="Type name for a double precision floating point value property (MgDoubleProperty).">MgPropertyType::Double</a> :
              $val = $featureReader-&gt;GetDouble($propertyName);
              fwrite($logFileHandle, <span class="stringliteral">&quot;$propertyName is double &quot;</span>$val<span class="stringliteral">&quot;n&quot;</span>);
              <span class="keywordflow">break</span>;
       <span class="keywordflow">case</span> <a class="code" href="../../d1/d70/class_mg_property_type_a23937231f886a65f5d37a458039e3a71.htm#a23937231f886a65f5d37a458039e3a71" title="Type name for a 16 bit signed integer value property (MgInt16Property).">MgPropertyType::Int16</a> :
              $val = $featureReader-&gt;GetInt16($propertyName);
              fwrite($logFileHandle, <span class="stringliteral">&quot;$propertyName is int16 &quot;</span>$val<span class="stringliteral">&quot;n&quot;</span>);
              <span class="keywordflow">break</span>;
       <span class="keywordflow">case</span> <a class="code" href="../../d1/d70/class_mg_property_type_a57e257ca082ce4d7de1521576dab1b91.htm#a57e257ca082ce4d7de1521576dab1b91" title="Type name for a 32 bit signed integer value property (MgInt32Property).">MgPropertyType::Int32</a> :
              $val = $featureReader-&gt;GetInt32($propertyName);
              fwrite($logFileHandle, <span class="stringliteral">&quot;$propertyName is int32 &quot;</span>$val<span class="stringliteral">&quot;n&quot;</span>);
              <span class="keywordflow">break</span>;
       <span class="keywordflow">case</span> <a class="code" href="../../d1/d70/class_mg_property_type_a4597cecc45be4e7f06646494e6f20d6c.htm#a4597cecc45be4e7f06646494e6f20d6c" title="Type name for a 64 bit signed integer value property (MgInt64Property).">MgPropertyType::Int64</a> :
              $val = $featureReader-&gt;GetInt64($propertyName);
              fwrite($logFileHandle, <span class="stringliteral">&quot;$propertyName is int64 &quot;</span>$val<span class="stringliteral">&quot;n&quot;</span>);
              <span class="keywordflow">break</span>;
       <span class="keywordflow">case</span> <a class="code" href="../../d1/d70/class_mg_property_type_ae1045fd508df42dfa31e8b5eb8cc1565.htm#ae1045fd508df42dfa31e8b5eb8cc1565" title="Type name for a string property (MgStringProperty).">MgPropertyType::String</a> :
              $val = $featureReader-&gt;GetString($propertyName);
              fwrite($logFileHandle, <span class="stringliteral">&quot;$propertyName is string &quot;</span>$val<span class="stringliteral">&quot;n&quot;</span>);
              <span class="keywordflow">break</span>;
       <span class="keywordflow">case</span> <a class="code" href="../../d1/d70/class_mg_property_type_a4d084449065fcf99c4e06a4124722044.htm#a4d084449065fcf99c4e06a4124722044" title="Type name for a Binary Large OBject property (MgBlobProperty).">MgPropertyType::Blob</a> :
              fwrite($logFileHandle, <span class="stringliteral">&quot;$propertyName is blobn&quot;</span>);
              <span class="keywordflow">break</span>;
       <span class="keywordflow">case</span> <a class="code" href="../../d1/d70/class_mg_property_type_ae6e8b38cc175e803669e0473a5a00319.htm#ae6e8b38cc175e803669e0473a5a00319" title="Type name for a Character Large OBject property (MgClobProperty).">MgPropertyType::Clob</a> :
              fwrite($logFileHandle, <span class="stringliteral">&quot;$propertyName is clobn&quot;</span>);
              <span class="keywordflow">break</span>;
       <span class="keywordflow">case</span> <a class="code" href="../../d1/d70/class_mg_property_type_a485f798b7264ac678831c47b06c28026.htm#a485f798b7264ac678831c47b06c28026" title="Type name for a feature property (MgFeatureProperty).">MgPropertyType::Feature</a> :
              $val = $featureReader-&gt;GetFeatureObject($propertyName);
             <span class="keywordflow">if</span> ($val != NULL)
             {
                  fwrite($logFileHandle, <span class="stringliteral">&quot;$propertyName is a featuren&quot;</span>);
                  printFeatureReader($val);
             }
             <span class="keywordflow">break</span>;
       <span class="keywordflow">case</span> <a class="code" href="../../d1/d70/class_mg_property_type_a6402f952147c25e86f87821e3ed9245e.htm#a6402f952147c25e86f87821e3ed9245e" title="Type name for a geometry property (MgGeometryProperty).">MgPropertyType::Geometry</a> :
              fwrite($logFileHandle, <span class="stringliteral">&quot;$propertyName is a geometryn&quot;</span>);
              $val = $featureReader-&gt;GetGeometry($propertyName);
              <span class="keywordflow">if</span> ($val != NULL)
              {
                 $aGeometry = $agfReaderWriter-&gt;Read($val);
                 $wktRepresentation = $wktReaderWriter-&gt;Write($aGeometry);
                 fwrite($logFileHandle, <span class="stringliteral">&quot;WKT Representation: &quot;</span>$wktRepresentation<span class="stringliteral">&quot;n&quot;</span>);
              }
              <span class="keywordflow">else</span>
              {
                 fwrite($logFileHandle, <span class="stringliteral">&quot;This geometry property is nulln&quot;</span>);
              }
              <span class="keywordflow">break</span>;
       <span class="keywordflow">case</span> <a class="code" href="../../d1/d70/class_mg_property_type_a8c83a125b4247a9441618114cacf5863.htm#a8c83a125b4247a9441618114cacf5863" title="Type name for a raster property (MgRasterProperty).">MgPropertyType::Raster</a> :
              $val = $featureReader-&gt;GetRaster($propertyName);
              fwrite($logFileHandle, <span class="stringliteral">&quot;$propertyName is a rastern&quot;</span>);
              <span class="keywordflow">break</span>;
       <span class="keywordflow">default</span> : fwrite($logFileHandle, <span class="stringliteral">&quot;Unknown property typen&quot;</span>);
    }
 }
</pre></div> </div>
<div class="CSharpExample">
<b>Example (C#)</b>
<br>
 <div class="fragment"><pre class="fragment"> <span class="keyword">using</span> OSGeo.MapGuide;
 <span class="keyword">private</span> StringBuilder sb;
 <span class="keyword">private</span> <span class="keyword">const</span> <span class="keywordtype">int</span> sbLength = 512;

 <span class="keyword">public</span> <span class="keywordtype">int</span> PrintFeatureReader(<a class="code" href="../../d6/ddc/class_mg_feature_reader.htm" title="Provides a forward-only, read-only iterator for reading features selected from the FDO Provider by th...">MgFeatureReader</a> featureReader, out String propertiesToStr)
 {
     <span class="keywordtype">int</span> featureCount = 0;
     <span class="keywordtype">int</span> propertyCount;
     String propertyName;
     <span class="keywordtype">int</span> propertyType;
     sb = <span class="keyword">new</span> StringBuilder(sbLength);
     <span class="keywordflow">while</span> (featureReader.<a class="code" href="../../df/dcc/class_mg_reader_aa0487e5da166d24147d2e543d85a4226.htm#aa0487e5da166d24147d2e543d85a4226" title="Advances the reader to the next item and determines whether there is another object to read...">ReadNext</a>())
     {
         featureCount++;
         propertyCount = featureReader.GetPropertyCount();
         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; propertyCount; i++)
         {
             propertyName = featureReader.GetPropertyName(i);
             propertyType = featureReader.GetPropertyType(propertyName);
             PrintPropertyValueFromReader(featureReader, propertyType, propertyName, ref sb);
         }
     }
     propertiesToStr = sb.ToString();
     <span class="keywordflow">return</span> featureCount;
 }

 <span class="keyword">private</span> <span class="keywordtype">void</span> PrintPropertyValueFromReader(<a class="code" href="../../df/dcc/class_mg_reader.htm" title="Provides a forward-only, read-only iterator for reading data. You must call ReadNext before you can a...">MgReader</a> reader,
     <span class="keywordtype">int</span> propertyType, String propertyName, ref StringBuilder sb)
 {
     Boolean isNull = reader.<a class="code" href="../../df/dcc/class_mg_reader_ad5a752e9a7555b30a90b756964d932b8.htm#ad5a752e9a7555b30a90b756964d932b8" title="Determines whether the value of the specified property is null.">IsNull</a>(propertyName);
     <span class="keywordflow">if</span> (propertyType == <a class="code" href="../../d1/d70/class_mg_property_type.htm" title="Defines the names for the various property types.">MgPropertyType</a>.<a class="code" href="../../d1/d70/class_mg_property_type_a4d084449065fcf99c4e06a4124722044.htm#a4d084449065fcf99c4e06a4124722044" title="Type name for a Binary Large OBject property (MgBlobProperty).">Blob</a>)
     {
         sb.Append(propertyName + <span class="stringliteral">&quot;=Blob(&quot;</span> + (isNull ? <span class="stringliteral">&quot;null&quot;</span> : <span class="stringliteral">&quot;notNull&quot;</span>) + <span class="stringliteral">&quot;);&quot;</span>);
     }
     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (propertyType == <a class="code" href="../../d1/d70/class_mg_property_type.htm" title="Defines the names for the various property types.">MgPropertyType</a>.<a class="code" href="../../d1/d70/class_mg_property_type_af094946b855cb1edb3e51f6f2547b718.htm#af094946b855cb1edb3e51f6f2547b718" title="Type name for a boolean property (MgBooleanProperty).">Boolean</a>)
     {
         sb.Append(propertyName + <span class="stringliteral">&quot;=Boolean(&quot;</span> + (isNull ? <span class="stringliteral">&quot;null&quot;</span> : reader.<a class="code" href="../../df/dcc/class_mg_reader_a6c0332831fa610649b8d9ddbfe1daab2.htm#a6c0332831fa610649b8d9ddbfe1daab2" title="Gets the Boolean value of the specified property.">GetBoolean</a>(propertyName).ToString()) + <span class="stringliteral">&quot;);&quot;</span>);
     }
     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (propertyType == <a class="code" href="../../d1/d70/class_mg_property_type.htm" title="Defines the names for the various property types.">MgPropertyType</a>.<a class="code" href="../../d1/d70/class_mg_property_type_a119062dfef7651615e25a54f634e9e15.htm#a119062dfef7651615e25a54f634e9e15" title="Type name for a byte (unsigned 8 bit value) property (MgByteProperty).">Byte</a>)
     {
         sb.Append(propertyName + <span class="stringliteral">&quot;=Byte(&quot;</span> + (isNull ? <span class="stringliteral">&quot;null&quot;</span> : reader.<a class="code" href="../../df/dcc/class_mg_reader_afb1dee312ba859173ad8f751ffe537b5.htm#afb1dee312ba859173ad8f751ffe537b5" title="Gets the Byte value of the specified property.">GetByte</a>(propertyName).ToString()) + <span class="stringliteral">&quot;);&quot;</span>);
     }
     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (propertyType == <a class="code" href="../../d1/d70/class_mg_property_type.htm" title="Defines the names for the various property types.">MgPropertyType</a>.<a class="code" href="../../d1/d70/class_mg_property_type_ae6e8b38cc175e803669e0473a5a00319.htm#ae6e8b38cc175e803669e0473a5a00319" title="Type name for a Character Large OBject property (MgClobProperty).">Clob</a>)
     {
         sb.Append(propertyName + <span class="stringliteral">&quot;=Clob(&quot;</span> + (isNull ? <span class="stringliteral">&quot;null&quot;</span> : <span class="stringliteral">&quot;notNull&quot;</span>) + <span class="stringliteral">&quot;);&quot;</span>);
     }
     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (propertyType == <a class="code" href="../../d1/d70/class_mg_property_type.htm" title="Defines the names for the various property types.">MgPropertyType</a>.<a class="code" href="../../d1/d70/class_mg_property_type_ad47ce1a052f91816e9b71e0144272d62.htm#ad47ce1a052f91816e9b71e0144272d62" title="Type name for an MgDateTime property (MgDateTimeProperty).">DateTime</a>)
     {
         String dateTimeStr = null;
         <span class="keywordflow">if</span> (!isNull)
         {
             <a class="code" href="../../d0/de3/class_mg_date_time.htm" title="MgDateTime is used to store dates, times, or both.">MgDateTime</a> aDateTime = reader.<a class="code" href="../../df/dcc/class_mg_reader_aeb2f01eb305deb3839cae9aac2e26d2c.htm#aeb2f01eb305deb3839cae9aac2e26d2c" title="Gets the MgDateTime value of the specified property.">GetDateTime</a>(propertyName);
             dateTimeStr = aDateTime.Month.ToString() + <span class="charliteral">&#39;.&#39;</span>
                 + aDateTime.Day.ToString() + <span class="charliteral">&#39;.&#39;</span> + aDateTime.Year.ToString()
                 + <span class="charliteral">&#39;:&#39;</span> + aDateTime.Hour.ToString() + <span class="charliteral">&#39;:&#39;</span> + aDateTime.Minute.ToString()
                 + <span class="charliteral">&#39;:&#39;</span> + aDateTime.Second.ToString();
         }
         sb.Append(propertyName + <span class="stringliteral">&quot;=DateTime(&quot;</span> + (isNull ? <span class="stringliteral">&quot;null&quot;</span> : dateTimeStr) + <span class="stringliteral">&quot;);&quot;</span>);
     }
     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (propertyType == <a class="code" href="../../d1/d70/class_mg_property_type.htm" title="Defines the names for the various property types.">MgPropertyType</a>.<a class="code" href="../../d1/d70/class_mg_property_type_a51e27358659c2b7e92c1690c25369d92.htm#a51e27358659c2b7e92c1690c25369d92" title="Type name for a double precision floating point value property (MgDoubleProperty).">Double</a>)
     {
         sb.Append(propertyName + <span class="stringliteral">&quot;=Double(&quot;</span> + (isNull ? <span class="stringliteral">&quot;null&quot;</span> : reader.<a class="code" href="../../df/dcc/class_mg_reader_af5092fdf46e16781856af925ae13fee7.htm#af5092fdf46e16781856af925ae13fee7" title="Gets the Double value of the specified property.">GetDouble</a>(propertyName).ToString()) + <span class="stringliteral">&quot;);&quot;</span>);
     }
     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (propertyType == <a class="code" href="../../d1/d70/class_mg_property_type.htm" title="Defines the names for the various property types.">MgPropertyType</a>.<a class="code" href="../../d1/d70/class_mg_property_type_a485f798b7264ac678831c47b06c28026.htm#a485f798b7264ac678831c47b06c28026" title="Type name for a feature property (MgFeatureProperty).">Feature</a>)
     {
         sb.Append(propertyName + <span class="stringliteral">&quot;=Feature(&quot;</span> + (isNull ? <span class="stringliteral">&quot;null&quot;</span> : <span class="stringliteral">&quot;notNull&quot;</span>) + <span class="stringliteral">&quot;);&quot;</span>);
     }
     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (propertyType == <a class="code" href="../../d1/d70/class_mg_property_type.htm" title="Defines the names for the various property types.">MgPropertyType</a>.<a class="code" href="../../d1/d70/class_mg_property_type_a6402f952147c25e86f87821e3ed9245e.htm#a6402f952147c25e86f87821e3ed9245e" title="Type name for a geometry property (MgGeometryProperty).">Geometry</a>)
     {
         sb.Append(propertyName + <span class="stringliteral">&quot;=Geometry(&quot;</span> + (isNull ? <span class="stringliteral">&quot;null&quot;</span> : geometryServices.MgByteReaderToWktText(reader.<a class="code" href="../../df/dcc/class_mg_reader_a165a64d3bd5e316b9c10aea8a4db80ef.htm#a165a64d3bd5e316b9c10aea8a4db80ef" title="Gets the Geometry for the specified property.">GetGeometry</a>(propertyName))) + <span class="stringliteral">&quot;);&quot;</span>);
     }
     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (propertyType == <a class="code" href="../../d1/d70/class_mg_property_type.htm" title="Defines the names for the various property types.">MgPropertyType</a>.<a class="code" href="../../d1/d70/class_mg_property_type_a23937231f886a65f5d37a458039e3a71.htm#a23937231f886a65f5d37a458039e3a71" title="Type name for a 16 bit signed integer value property (MgInt16Property).">Int16</a>)
     {
         sb.Append(propertyName + <span class="stringliteral">&quot;=Int16(&quot;</span> + (isNull ? <span class="stringliteral">&quot;null&quot;</span> : reader.<a class="code" href="../../df/dcc/class_mg_reader_aedc4104e41b0d07bcde3c71915d2330d.htm#aedc4104e41b0d07bcde3c71915d2330d" title="Gets the 16 bit integer value of the specified property.">GetInt16</a>(propertyName).ToString()) + <span class="stringliteral">&quot;);&quot;</span>);
     }
     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (propertyType == <a class="code" href="../../d1/d70/class_mg_property_type.htm" title="Defines the names for the various property types.">MgPropertyType</a>.<a class="code" href="../../d1/d70/class_mg_property_type_a57e257ca082ce4d7de1521576dab1b91.htm#a57e257ca082ce4d7de1521576dab1b91" title="Type name for a 32 bit signed integer value property (MgInt32Property).">Int32</a>)
     {
         sb.Append(propertyName + <span class="stringliteral">&quot;=Int32(&quot;</span> + (isNull ? <span class="stringliteral">&quot;null&quot;</span> : reader.<a class="code" href="../../df/dcc/class_mg_reader_a9a7e6f4c6018fbd0f030fa1396d70112.htm#a9a7e6f4c6018fbd0f030fa1396d70112" title="Gets the 32 bit integer value of the specified property.">GetInt32</a>(propertyName).ToString()) + <span class="stringliteral">&quot;);&quot;</span>);
     }
     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (propertyType == <a class="code" href="../../d1/d70/class_mg_property_type.htm" title="Defines the names for the various property types.">MgPropertyType</a>.<a class="code" href="../../d1/d70/class_mg_property_type_a4597cecc45be4e7f06646494e6f20d6c.htm#a4597cecc45be4e7f06646494e6f20d6c" title="Type name for a 64 bit signed integer value property (MgInt64Property).">Int64</a>)
     {
         sb.Append(propertyName + <span class="stringliteral">&quot;=Int64(&quot;</span> + (isNull ? <span class="stringliteral">&quot;null&quot;</span> : reader.<a class="code" href="../../df/dcc/class_mg_reader_a716e551eac1d28a92f6b11922490726b.htm#a716e551eac1d28a92f6b11922490726b" title="Gets the 64 bit integer value of the specified property.">GetInt64</a>(propertyName).ToString()) + <span class="stringliteral">&quot;);&quot;</span>);
     }
     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (propertyType == <a class="code" href="../../d1/d70/class_mg_property_type.htm" title="Defines the names for the various property types.">MgPropertyType</a>.<a class="code" href="../../d1/d70/class_mg_property_type_a8c83a125b4247a9441618114cacf5863.htm#a8c83a125b4247a9441618114cacf5863" title="Type name for a raster property (MgRasterProperty).">Raster</a>)
     {
         sb.Append(propertyName + <span class="stringliteral">&quot;=Raster(&quot;</span> + (isNull ? <span class="stringliteral">&quot;null&quot;</span> : <span class="stringliteral">&quot;notNull&quot;</span>) + <span class="stringliteral">&quot;);&quot;</span>);
     }
     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (propertyType == <a class="code" href="../../d1/d70/class_mg_property_type.htm" title="Defines the names for the various property types.">MgPropertyType</a>.<a class="code" href="../../d1/d70/class_mg_property_type_acd03cf26a6a730a009c280fdfa9965d6.htm#acd03cf26a6a730a009c280fdfa9965d6" title="Type name for a single precision floating point value property (MgSingleProperty).">Single</a>)
     {
         sb.Append(propertyName + <span class="stringliteral">&quot;=Single(&quot;</span> + (isNull ? <span class="stringliteral">&quot;null&quot;</span> : reader.<a class="code" href="../../df/dcc/class_mg_reader_a3938d04fafe9e45be43097f3b9b23c55.htm#a3938d04fafe9e45be43097f3b9b23c55" title="Gets the Single value of the specified property.">GetSingle</a>(propertyName).ToString()) + <span class="stringliteral">&quot;);&quot;</span>);
     }
     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (propertyType == <a class="code" href="../../d1/d70/class_mg_property_type.htm" title="Defines the names for the various property types.">MgPropertyType</a>.<a class="code" href="../../d1/d70/class_mg_property_type_ae1045fd508df42dfa31e8b5eb8cc1565.htm#ae1045fd508df42dfa31e8b5eb8cc1565" title="Type name for a string property (MgStringProperty).">String</a>)
     {
         sb.Append(propertyName + <span class="stringliteral">&quot;=String(&quot;</span> + (isNull ? <span class="stringliteral">&quot;null&quot;</span> : reader.<a class="code" href="../../df/dcc/class_mg_reader_ad55db8eb37b43bf7f89751fe145a650f.htm#ad55db8eb37b43bf7f89751fe145a650f" title="Gets the string value of the specified property.">GetString</a>(propertyName)) + <span class="stringliteral">&quot;);&quot;</span>);
     }
     <span class="keywordflow">else</span>
     {
         sb.Append(propertyName + <span class="stringliteral">&quot;=Unknown(&quot;</span> + propertyType.ToString() + <span class="stringliteral">&quot;);&quot;</span>);
     }
 }
</pre></div> </div>
 </div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="../../d6/ddc/class_mg_feature_reader.htm">MgFeatureReader</a>      </li>

    <li class="footer">Comments or suggestions? Send us <a href="http://mapguide.osgeo.org/feedback">feedback</a>. | Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.0 </li>
   </ul>
 </div>


</body>
</html>
